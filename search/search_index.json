{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"bienvenido","text":""},{"location":"#pagina-juan-jesus-lopez","title":"p\u00e1gina juan jesus lopez","text":""},{"location":"practica3-1/","title":"Practica-IAW-3.1- Implantaci\u00f3n de Moodle en Amazon Web Services (AWS) mediante Ansible","text":""},{"location":"practica3-1/#en-esta-practica-vamos-a-realizar-la-implantacion-de-la-aplicacion-web-moodle-en-dos-instancias-ec2-de-amazon-web-services-aws-haciendo-uso-de-playbooks-de-ansible-en-una-de-las-instancias-debera-instalar-apache-http-server-y-los-modulos-necesarios-de-php-y-en-la-otra-maquina-debera-instalar-mysql-server","title":"En esta pr\u00e1ctica vamos a realizar la implantaci\u00f3n de la aplicaci\u00f3n web Moodle en dos instancias EC2 de Amazon Web Services (AWS) haciendo uso de playbooks de Ansible. En una de las instancias deber\u00e1 instalar Apache HTTP Server y los m\u00f3dulos necesarios de PHP y en la otra m\u00e1quina deber\u00e1 instalar MySQL Server.","text":""},{"location":"practica3-1/#implantacion-de-moodle-en-amazon-web-services-aws-mediante-ansible","title":"Implantaci\u00f3n de Moodle en Amazon Web Services (AWS) mediante Ansible","text":""},{"location":"practica3-1/#pasos-a-seguir-antes-de-todo","title":"Pasos a seguir antes de todo:","text":""},{"location":"practica3-1/#tener-la-siguiente-estructura-de-directorios-y-archivos-dentro-de-la-instancia-del-nodo-control-ya-que-todo-lo-que-vamos-a-hacer-va-a-ser-desde-el-nodo-control","title":"Tener la siguiente estructura de directorios y archivos dentro de la instancia del nodo control, ya que todo lo que vamos a hacer va a ser desde el nodo control:","text":""},{"location":"practica3-1/#la-arquitectura-de-esta-aplicacion-estara-formada-por-dos-capas","title":"La arquitectura de esta aplicaci\u00f3n estar\u00e1 formada por dos capas:","text":""},{"location":"practica3-1/#una-capa-de-front-end-formada-por-un-servidor-web-con-apache-http-server","title":"Una capa de front-end, formada por un servidor web con Apache HTTP Server.","text":""},{"location":"practica3-1/#una-capa-de-back-end-formada-por-un-servidor-mysql","title":"Una capa de back-end, formada por un servidor MySQL.","text":""},{"location":"practica3-1/#_1","title":"Practica_3-1","text":""},{"location":"practica3-1/#ahora-vamos-al-archivo-de-inventory-donde-en-inventory-tenemos-que-poner-las-ip-publica-del-frontend-y-el-backend-y-el-grupo","title":"Ahora vamos al archivo de inventory, donde en inventory tenemos que poner las ip p\u00fablica del frontend y el backend y el grupo.","text":"<pre><code>[frontend]\n44.199.2.175\n\n[backend]\n34.233.73.87\n\n[all:vars]\nansible_user=ubuntu\nansible_ssh_private_key_file=/home/ubuntu/practica-iaw-3.1/vockey.pem\nansible_ssh_common_args='-o StrictHostKeyChecking=accept-new'\n</code></pre>"},{"location":"practica3-1/#1-paso-creamos-el-nombre-de-dominio-desde-no-ip-poniendo-la-ip-del-frontend","title":"1. paso: Creamos el nombre de dominio desde no-ip, poniendo la ip del frontend","text":""},{"location":"practica3-1/#2-paso-dentro-de-la-instancia-nodo-control-tener-metida-la-vockeypem-y-darle-permisos-chmod-400-y-descargar-ansible","title":"2. paso: Dentro de la instancia nodo control, tener metida la vockey.pem y darle permisos chmod 400 y descargar ansible","text":"<pre><code>apt install ansible -y\n</code></pre>"},{"location":"practica3-1/#3-paso-vamos-a-utilizar-las-siguientes-variables","title":"3. paso: vamos a utilizar las siguientes variables:","text":"<pre><code>frontend_private_ip: 172.31.41.12\n\ndb:\n    name: moodle_db\n    user: juanje\n    password: Eliker123\n\nmoodle:\n    directory: /var/www/html/moodle\n    db_name: moodle_db\n    db_user: usuario_moodle\n    db_password: Eliker123\n    type: mysqli\n    db_host: 172.31.34.212\n    ip_cliente_mysql: 172.31.%\n    domain: practica-iaw.zapto.org\n    data_directory: /var/www/moodledata\n\n\ncertbot:\n    le_email: juan@email.es\n    le_domain: practica-iaw.zapto.org\n\n</code></pre>"},{"location":"practica3-1/#4-paso-crear-el-archivo-install_lamp_frontendyml","title":"4. paso: crear el archivo install_lamp_frontend.yml","text":"<pre><code>---\n- name: Configurar Moodle Frontend\n  hosts: frontend\n  become: yes\n\n  tasks:\n\n    - name: Actualizar los repositorios\n      apt:\n        update_cache: yes\n\n    - name: Instalar el servidor web Apache\n      apt:\n        name: apache2\n        state: present\n\n    - name: Instalar PHP y los m\u00f3dulos necesarios\n      apt: \n        name:\n          - php\n          - php-mysql\n          - libapache2-mod-php\n          - php-bcmath\n          - php-curl\n          - php-gd\n          - php-imagick\n          - php-intl\n          - php-memcached\n          - php-mbstring\n          - php-dom\n          - php-zip\n          - php-cli\n          - php-xml\n          - php-soap\n        state: present\n\n    - name: Modificamos el valor max_input_vars de PHP\n      replace: \n        path: /etc/php/8.3/apache2/php.ini\n        regexp: ;max_input_vars = 1000\n        replace: max_input_vars = 5000\n\n    - name: Modificamos el valor de memory_limit de PHP\n      replace: \n        path: /etc/php/8.3/apache2/php.ini\n        regexp: memory_limit = 128M\n        replace: memory_limit = 256M\n\n    - name: Modificamos el valor de post_max_size de PHP\n      replace: \n        path: /etc/php/8.3/apache2/php.ini\n        regexp: post_max_size = 8M\n        replace: post_max_size = 128M\n\n    - name: Modificamos el valor de upload_max_filesize de PHP\n      replace:\n        path: /etc/php/8.3/apache2/php.ini\n        regexp: upload_max_filesize = 2M\n        replace: upload_max_filesize = 128M\n\n    - name: Copiar el archivo de configuraci\u00f3n de Apache\n      copy:\n        src: ../templates/000-default.conf\n        dest: /etc/apache2/sites-available/\n        mode: 0755\n\n    - name: Crear directorio /var/www/html/moodle\n      file:\n        path: /var/www/html/moodle\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: '0755'\n\n    - name: Crear directorio /var/www/moodledata\n      file:\n        path: /var/www/moodledata\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: '0755'\n\n    - name: Habilitar el m\u00f3dulo rewrite de Apache\n      command: a2enmod rewrite\n      changed_when: false\n\n\n    - name: Reiniciar el servidor web Apache\n      service:\n        name: apache2\n        state: restarted\n</code></pre>"},{"location":"practica3-1/#5-paso-crear-el-archivo-install_lamp_backendyml","title":"5. paso: crear el archivo install_lamp_backend.yml","text":"<pre><code>---\n- name: Playbook para instalar la pila LAMP en el Backend\n  hosts: backend\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n  tasks:\n\n    - name: Actualizar los repositorios\n      apt:\n        update_cache: yes\n\n    - name: Instalar el sistema gestor de bases de datos MySQL\n      apt:\n        name: mysql-server\n        state: present\n\n    - name: Instalamos el m\u00f3dulo de pymysql\n      apt:\n        name: python3-pymysql\n        state: present\n\n    - name: Crear la base de datos para moodle\n      mysql_db:\n        name: \"{{ moodle.db_name }}\"\n        encoding: utf8mb4\n        collation: utf8mb4_unicode_ci\n        state: present\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n\n    - name: Borra el usuario si existe\n      mysql_user:\n        name: \"{{ moodle.db_user }}\"\n        host: \"{{ moodle.ip_cliente_mysql }}\"\n        state: absent\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n\n    - name: Crear el usuario para la base de datos de moodle\n      mysql_user:\n        name: \"{{ moodle.db_user }}\"\n        host: \"{{ moodle.ip_cliente_mysql }}\"\n        password: \"{{ moodle.db_password }}\"\n        priv: \"{{ moodle.db_name }}.*:ALL\"\n        state: present\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n\n    - name: Reiniciamos privilegios del usuario\n      mysql_db:\n        name: \"{{ moodle.db_name }}\"\n        state: present\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n\n    - name: Reiniciamos el servicio de base de datos\n      service:\n        name: mysql\n        state: restarted\n</code></pre>"},{"location":"practica3-1/#6-paso-crear-el-archivo-setup_letsencrypt_httpsyml","title":"6. paso: crear el archivo setup_letsencrypt_https.yml","text":"<pre><code>---\n- name: Configurar Certbot y solicitar certificado SSL\n  hosts: frontend\n  become: yes\n  vars_files:\n    - ../vars/variables.yml \n\n  tasks:\n    # Instalar snapd si no est\u00e1 presente\n    - name: Instalar snapd si no est\u00e1 presente\n      apt:\n        name: snapd\n        state: present\n\n    # Instalar el paquete base de snap si no est\u00e1\n    - name: Instalar core de snap si no est\u00e1 presente\n      snap:\n        name: core\n        state: present\n\n    # Eliminar instalaciones anteriores de certbot con apt\n    - name: Eliminar Certbot instalado con apt (si existe)\n      apt:\n        name: certbot\n        state: absent\n\n    # Instalar Certbot con snap\n    - name: Instalar Certbot usando snap\n      snap:\n        name: certbot\n        state: present\n\n    # Verificar las variables certbot\n    - name: Verificar las variables certbot\n      debug:\n        msg: \"Email: {{ certbot.le_email }}, Domain: {{ certbot.le_domain }}\"\n\n    # Solicitar un certificado SSL para el dominio con Certbot\n    - name: Solicitar certificado SSL para el dominio con Certbot\n      command: &gt;\n        certbot --apache\n        -m \"{{ certbot.le_email }}\"\n        --agree-tos\n        --no-eff-email\n        -d \"{{ certbot.le_domain }}\"\n        --non-interactive\n</code></pre>"},{"location":"practica3-1/#7-paso-crear-el-archivo-deployyml","title":"7. paso: crear el archivo deploy.yml","text":"<pre><code>- name: Deploy Moodle\n  hosts: frontend\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n    - name: Descargar el c\u00f3digo fuente de moodle\n      get_url:\n        url: https://github.com/moodle/moodle/archive/refs/tags/v4.3.1.zip \n        dest: /tmp\n        mode: 0755\n\n    - name: Instalar unzip\n      apt: \n        name: unzip\n        state: present\n\n    - name: Descomprimir el paquete de moodle\n      unarchive:\n        src: /tmp/moodle-4.3.1.zip  \n        dest: /tmp\n        remote_src: yes\n\n    - name: Eliminar el directorio de instalaci\u00f3n\n      file:\n        path: /var/www/html/\n        state: absent\n\n    - name: Crear el directorio de instalaci\u00f3n\n      file:\n        path: /var/www/html\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: 0755\n\n    - name: Copiar contenido de moodle-4.3.1 a /var/www/html\n      copy:\n        src: /tmp/moodle-4.3.1/\n        dest: /var/www/html\n        remote_src: true\n        force: yes\n\n    - name: Modificar los permisos del directorio /var/www/html\n      file:\n        path: /var/www/html\n        owner: www-data\n        group: www-data\n        recurse: yes\n        mode: 0755\n\n    - name: Modificar los permisos del directorio /var/moodledata\n      file:\n        path: /var/moodledata\n        owner: www-data\n        group: www-data\n        recurse: yes\n        mode: 0755\n\n    - name: Instalar moodle desde PHP CLI\n      command:\n        sudo -u www-data php /var/www/html/admin/cli/install.php \\\n        --wwwroot={{ moodle.www_root }} \\\n        --dataroot={{ moodle.data_root }} \\\n        --dbtype={{ moodle.type }} \\\n        --dbhost={{ moodle.host }} \\\n        --dbname={{ db.name }} \\\n        --dbuser={{ db.user }} \\\n        --dbpass={{ db.password }} \\\n        --fullname=\"{{ moodle.fullname }}\" \\\n        --shortname=\"{{ moodle.shortname }}\" \\\n        --summary=\"{{ moodle.summary }}\" \\\n        --adminuser={{ moodle.admin_user }} \\\n        --adminpass={{ moodle.admin_pass }} \\\n        --adminemail={{ moodle.admin_email }} \\\n        --non-interactive \\\n        --agree-license\n      args:\n        chdir: /var/www/html\n\n    - name: Configurar cron para Moodle\n      become: yes\n      ansible.builtin.cron:\n        name: \"Moodle Cron Job\"\n        minute: \"*\"\n        job: \"/usr/bin/php /var/www/html/admin/cli/cron.php &gt;/dev/null 2&gt;&amp;1\"\n        state: present\n\n\n    - name: Reiniciar servicio cron \n      become: yes\n      ansible.builtin.service:\n        name: cron\n        state: restarted\n        enabled: yes\n\n</code></pre>"},{"location":"practica3-1/#8-paso-segun-el-orden-hayamos-creado-los-archivos-se-ejecutan-primero-se-ejecuta-el-frontend-backend-letsencrypt-y-por-ultimo-deploy","title":"8. paso: seg\u00fan el orden hayamos creado los archivos, se ejecutan, primero se ejecuta el frontend, backend, letsencrypt y por ultimo deploy","text":"<pre><code>sudo ansible-playbook -i ./inventory/inventory main.yml\n</code></pre>"},{"location":"practica3-1/#comprobacion-ejecucion-del-mainyml-donde-se-encuentran-todos-los-archivos","title":"comprobaci\u00f3n ejecucion del main.yml donde se encuentran todos los archivos","text":""},{"location":"practica3-1/#9-paso-comprobacion-del-funcionamiento-correcto-de-moodle","title":"9. paso: comprobaci\u00f3n del funcionamiento correcto de moodle","text":""},{"location":"practica3-1/#10-paso-comprobar-certificado","title":"10. paso: comprobar certificado","text":""},{"location":"practica3-2/","title":"Practica-IAW-3.2- Implantaci\u00f3n de Moodle en Amazon Web Services (AWS) mediante Ansible","text":""},{"location":"practica3-2/#en-esta-practica-vamos-a-realizar-la-implantacion-de-la-aplicacion-web-moodle-en-dos-instancias-ec2-de-amazon-web-services-aws-haciendo-uso-de-playbooks-de-ansible-en-una-de-las-instancias-debera-instalar-apache-http-server-y-los-modulos-necesarios-de-php-y-en-la-otra-maquina-debera-instalar-mysql-server","title":"En esta pr\u00e1ctica vamos a realizar la implantaci\u00f3n de la aplicaci\u00f3n web Moodle en dos instancias EC2 de Amazon Web Services (AWS) haciendo uso de playbooks de Ansible. En una de las instancias deber\u00e1 instalar Apache HTTP Server y los m\u00f3dulos necesarios de PHP y en la otra m\u00e1quina deber\u00e1 instalar MySQL Server.","text":""},{"location":"practica3-2/#implantacion-de-moodle-en-amazon-web-services-aws-mediante-ansible","title":"Implantaci\u00f3n de Moodle en Amazon Web Services (AWS) mediante Ansible","text":""},{"location":"practica3-2/#pasos-a-seguir-antes-de-todo","title":"Pasos a seguir antes de todo:","text":""},{"location":"practica3-2/#tener-la-siguiente-estructura-de-directorios-y-archivos-dentro-de-la-instancia-del-nodo-control-ya-que-todo-lo-que-vamos-a-hacer-va-a-ser-desde-el-nodo-control","title":"Tener la siguiente estructura de directorios y archivos dentro de la instancia del nodo control, ya que todo lo que vamos a hacer va a ser desde el nodo control:","text":""},{"location":"practica3-2/#la-arquitectura-de-esta-aplicacion-estara-formada-por-tres-capas","title":"La arquitectura de esta aplicaci\u00f3n estar\u00e1 formada por tres capas:","text":""},{"location":"practica3-2/#-una-capa-con-un-balanceador-de-carga-que-repartira-las-peticiones-entre-los-servidores-web","title":"- Una capa con un balanceador de carga que repartir\u00e1 las peticiones entre los servidores web.","text":""},{"location":"practica3-2/#-una-capa-de-front-end-formada-por-un-servidor-web-con-apache-http-server","title":"- Una capa de front-end, formada por un servidor web con Apache HTTP Server.","text":""},{"location":"practica3-2/#-una-capa-de-back-end-formada-por-un-servidor-mysql","title":"- Una capa de back-end, formada por un servidor MySQL.","text":""},{"location":"practica3-2/#_1","title":"Practica_3-2","text":""},{"location":"practica3-2/#1-paso-creamos-el-nombre-de-dominio-desde-no-ip-poniendo-la-ip-del-frontend","title":"1. paso: Creamos el nombre de dominio desde no-ip, poniendo la ip del frontend","text":""},{"location":"practica3-2/#2-paso-ahora-vamos-a-crear-el-archivo-de-inventory-donde-en-inventory-tenemos-que-poner-las-ip-publica-del-frontend-backend-nfs-y-del-loadbalancer","title":"2. paso:  Ahora vamos a crear el archivo de inventory, donde en inventory tenemos que poner las ip p\u00fablica del frontend, backend, nfs, y del loadbalancer.","text":""},{"location":"practica3-2/#hice-otro-grupo-para-frontend-1-para-solo-instalar-wordpress-en-un-frontend","title":"hice otro grupo para frontend 1 para solo instalar wordpress en un frontend","text":"<pre><code>[frontend]\n52.22.98.141\n44.199.57.156\n\n[frontend1]\n52.22.98.141\n\n[backend]\n35.168.180.126\n\n[load_balancer]\n98.85.8.55\n\n[nfs]\n54.84.33.233\n\n[all:vars]\nansible_user=ubuntu\nansible_ssh_private_key_file=/home/ubuntu/practica-iaw-3.1/vockey.pem\nansible_ssh_common_args='-o StrictHostKeyChecking=accept-new'\n</code></pre>"},{"location":"practica3-2/#3-paso-vamos-a-utilizar-las-siguientes-variables-donde-se-definiran-dentro-de-su-arhcivo-correspondiente","title":"3. paso: vamos a utilizar las siguientes variables donde se definiran dentro de su arhcivo correspondiente:","text":"<pre><code># Variables de configuraci\u00f3n de Let's Encrypt\nLE_EMAIL: \"juanje@gmail.com\"\nLE_DOMAIN: \"practica-iaw.zapto.org\"\n\n# Variables de MySQL\nmysql_user: \"juanje\"\nmysql_password: \"eliker123\"\nmysql_host: \"172.31.85.101\"\n\n# Variables de configuraci\u00f3n de la base de datos de WordPress\nWORDPRESS_DB_NAME: \"wordpress\"\nWORDPRESS_DB_USER: \"juanje\"\nWORDPRESS_DB_PASSWORD: \"eliker123\"\nWORDPRESS_DB_HOST: \"172.31.85.101\"\nWORDPRESS_DIRECTORY: \"/var/www/html\"\nwordpress_locale: \"es_ES\"\n\n\n\n# Variables para la configuraci\u00f3n del sitio de WordPress\nlocale: \"es_ES\"  # Localizaci\u00f3n de WordPress\nwordpress_title: \"Mi WordPress juanje\"  # T\u00edtulo del sitio de WordPress\nwordpress_admin_user: \"admin\"  # Usuario del administrador\nwordpress_admin_password: \"admin\"  # Contrase\u00f1a del administrador\nwordpress_admin_email: \"admin@example.com\"  # Correo del administrador\nwordpress_hide_login_url: \"nada\"  # URL oculta para el login\ndomain: \"https://practica-iaw.zapto.org\"\n\n# IPs y configuraciones de red\nBACKEND_PRIVATE_IP: \"172.31.85.101\"\nIP_FRONTEND_1: \"172.31.24.92\"\nIP_FRONTEND_2: \"172.31.23.88\"\nSERVER_IP: \"172.31.28.85\"\nCLIENT_IP: \"172.31.24.92\"\nFRONTEND_PRIVATE_IP: \"172.31.%\"\nFRONTEND_IP_RANGE: \"172.31.0.0/24\"\n\n\n</code></pre>"},{"location":"practica3-2/#4-paso-crear-el-archivo-install_lamp_frontendyml","title":"4. paso: crear el archivo install_lamp_frontend.yml","text":"<pre><code>---\n- name: Instalar LAMP en Frontend\n  hosts: frontend\n  become: yes\n  vars_files:\n    - ../vars/variables.yml\n  tasks:\n\n    # Actualizamos los repositorios para tener las \u00faltimas versiones de los paquetes\n    - name: Actualizar los repositorios\n      apt:\n        update_cache: yes\n\n    # Instalamos Apache\n    - name: Instalar el servidor web Apache\n      apt:\n        name: apache2\n        state: present\n\n    # Habilitamos el m\u00f3dulo rewrite de Apache para permitir la reescritura de URLs\n    - name: Habilitar el m\u00f3dulo rewrite de Apache\n      apache2_module:\n        name: rewrite\n        state: present\n\n    # Copiamos el archivo de configuraci\u00f3n de Apache desde mis plantillas\n    - name: Copiar el archivo de configuraci\u00f3n de Apache\n      copy:\n        src: ../templates/000-default.conf\n        dest: /etc/apache2/sites-available/\n        mode: 0755\n\n    # Instalamos PHP y los m\u00f3dulos necesarios para ejecutar WordPress o Moodle\n    - name: Instalar PHP y los m\u00f3dulos necesarios\n      apt: \n        name: \n          - php\n          - libapache2-mod-php\n          - php-mysql\n          - php-xml\n          - php-mbstring\n          - php-curl\n          - php-zip\n          - php-gd\n          - php-intl\n          - php-soap\n          - php-ldap\n          - php-opcache\n          - php-cli\n        state: present\n\n    # Reiniciamos Apache para aplicar los cambios de configuraci\u00f3n\n    - name: Reiniciar el servidor web Apache\n      service:\n        name: apache2\n        state: restarted\n\n</code></pre>"},{"location":"practica3-2/#5-paso-crear-el-archivo-install_lamp_backendyml","title":"5. paso: crear el archivo install_lamp_backend.yml","text":"<pre><code>---\n- name: Instalar MySQL en Backend\n  hosts: backend\n  become: yes\n  vars_files:\n    - ../vars/variables.yml\n  tasks:\n    - name: Actualizar repositorios\n      ansible.builtin.apt:\n        update_cache: yes\n        cache_valid_time: 3600\n\n    - name: Instalar MySQL Server\n      apt:\n        name: mysql-server\n        state: present\n\n    - name: Configurar MySQL para aceptar conexiones remotas\n      lineinfile:\n        path: /etc/mysql/mysql.conf.d/mysqld.cnf\n        regexp: '^bind-address'\n        line: \"bind-address = {{ BACKEND_PRIVATE_IP }}\"\n      notify: Reiniciar MySQL\n\n  handlers:\n    - name: Reiniciar MySQL\n      service:\n        name: mysql\n        state: restarted\n\n</code></pre>"},{"location":"practica3-2/#7-paso-crear-el-archivo-setup_nfs_serveryml","title":"7. paso: crear el archivo setup_nfs_Server.yml","text":"<pre><code>---\n- name: Configuraci\u00f3n del servidor NFS\n  hosts: nfs\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n  tasks:\n\n    - name: Actualizar los repositorios\n      apt:\n        update_cache: yes\n\n    - name: Actualizar los paquetes\n      apt:\n        upgrade: dist\n        update_cache: yes\n\n    - name: Instalar el servidor NFS\n      apt:\n        name: nfs-kernel-server\n        state: present\n\n    - name: Crear el directorio /var/www/html\n      file:\n        path: /var/www/html\n        state: directory\n        owner: nobody\n        group: nogroup\n        mode: '0755'\n\n    - name: Configurar los directorios exportados en /etc/exports\n      lineinfile:\n        path: /etc/exports\n        line: \"/var/www/html {{ CLIENT_IP }}(rw,sync,no_subtree_check,no_root_squash)\"\n        create: yes\n\n    - name: Reiniciar el servicio NFS\n      service:\n        name: nfs-kernel-server\n        state: restarted\n</code></pre>"},{"location":"practica3-2/#8-paso-crear-el-archivo-setup_nfs_clientyml","title":"8. paso: crear el archivo setup_nfs_Client.yml","text":"<pre><code>- name: Configurar Cliente NFS\n  hosts: frontend1\n  become: yes\n  vars_files:\n    - ../vars/variables.yml\n  tasks:\n\n    - name: Actualizar /etc/fstab para montar el directorio NFS al iniciar\n      lineinfile:\n        path: /etc/fstab\n        line: \"{{ SERVER_IP }}:/var/www/html /var/www/html nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0\"\n        create: yes\n\n    - name: Instalar cliente NFS\n      apt:\n        name: nfs-common\n        state: present\n\n    - name: Montar directorio NFS\n      mount:\n        path: \"{{ WORDPRESS_DIRECTORY }}\"\n        src: \"{{ SERVER_IP }}:{{ WORDPRESS_DIRECTORY }}\"\n        fstype: nfs\n        opts: \"auto,nofail,noatime,nolock,intr,tcp,actimeo=1800\"\n        state: mounted\n\n    - name: Actualizar /etc/fstab para montar el directorio NFS al iniciar\n      lineinfile:\n        path: /etc/fstab\n        line: \"{{ SERVER_IP }}:/var/www/html /var/www/html nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0\"\n        create: yes\n</code></pre>"},{"location":"practica3-2/#9-paso-crear-el-archivo-deploy_wordpress_backendyml","title":"9. paso: crear el archivo deploy_wordpress_backend.yml","text":"<pre><code>---\n- name: Configurar Base de Datos para WordPress\n  hosts: backend\n  become: yes\n  vars_files:\n    - ../vars/variables.yml\n  tasks:\n    # Instalar python3-pymysql usando apt\n    - name: Asegurarse de que python3-pymysql est\u00e9 instalado\n      apt:\n        name: python3-pymysql\n        state: present\n        update_cache: yes\n      become: yes\n\n    # Instalar python3-pip usando apt\n    - name: Asegurarse de que pip3 est\u00e9 instalado\n      apt:\n        name: python3-pip\n        state: present\n        update_cache: yes\n      become: yes\n\n    # Configurar MySQL para aceptar conexiones remotas\n    - name: Permitir conexiones remotas en MySQL\n      lineinfile:\n        path: /etc/mysql/mysql.conf.d/mysqld.cnf\n        regexp: '^#bind-address.*'\n        line: 'bind-address = 0.0.0.0'\n      become: yes\n\n    - name: Reiniciar servicio MySQL\n      systemd:\n        name: mysql\n        state: restarted\n      become: yes\n\n    # Crear la base de datos de WordPress\n    - name: Crear la base de datos de WordPress\n      mysql_db:\n        name: \"{{ WORDPRESS_DB_NAME }}\"   # Aseg\u00farate de que sea WORDPRESS_DB_NAME\n        state: present\n        login_unix_socket: /var/run/mysqld/mysqld.sock \n      become: yes\n\n    # Crear usuario de WordPress y asignar privilegios\n    - name: Crear usuario de WordPress\n      mysql_user:\n        name: \"{{ WORDPRESS_DB_USER }}\"\n        password: \"{{ WORDPRESS_DB_PASSWORD }}\"\n        host: \"{{ FRONTEND_PRIVATE_IP }}\"\n        priv: \"{{ WORDPRESS_DB_NAME }}.*:ALL\"\n        state: present\n        login_unix_socket: /var/run/mysqld/mysqld.sock \n      become: yes\n\n\n</code></pre>"},{"location":"practica3-2/#10-paso-crear-el-archivo-deploy_wordpress_frontendyml","title":"10. paso: crear el archivo deploy_wordpress_frontend.yml","text":"<pre><code>---\n- name: Desplegar Frontend de WordPress\n  hosts: frontend1\n  become: yes\n  vars_files:\n    - ../vars/variables.yml\n  tasks:\n\n    # Eliminamos el directorio de instalaci\u00f3n si existe\n    - name: Eliminar el directorio de instalaci\u00f3n\n      file:\n        path: /usr/local/bin/wp/\n        state: absent\n\n    # Configuramos los permisos en el directorio donde voy a instalar de WP-CLI\n    - name: Configurar permisos de wp-cli\n      file:\n        path: /usr/local/bin/\n        owner: www-data\n        group: www-data\n        mode: 0755\n\n    # Descargamos WP-CLI para gestionar WordPress desde la terminal\n    - name: Descargar la utilidad WP-CLI\n      get_url:\n        url: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n        dest: /usr/local/bin/wp\n        mode: 0755\n\n    # Eliminamos instalaciones previas de Wordpress en /var/www/html\n    - name: Eliminar instalaciones previas de WordPress\n      shell: rm -rf /var/www/html/*\n\n    # Modificamos los permisos del directorio de instalaci\u00f3n de Wordpress\n    - name: Modificar permisos del directorio /var/www/html\n      file:\n        path: /var/www/html\n        owner: www-data\n        group: www-data\n        recurse: yes\n        mode: 0755\n\n    # Descargamos el c\u00f3digo fuente de WordPress usando WP-CLI\n    - name: Descargar el c\u00f3digo fuente de WordPress\n      command: \n        wp core download \\\n        --locale=\"{{ wordpress_locale }}\" \\\n        --path=/var/www/html \\\n        --allow-root\n\n    # Eliminamos el archivo wp-config.php en caso de que exista\n    - name: Eliminar wp-config.php si existe\n      file:\n        path: /var/www/html/wp-config.php\n        state: absent\n\n    # Creamos el archivo de configuraci\u00f3n de WordPress con los datos del archivo de variables\n    - name: Crear el archivo de configuraci\u00f3n de WordPress\n      command: \n        wp config create \\\n        --dbname=\"{{ WORDPRESS_DB_NAME }}\" \\\n        --dbuser=\"{{ WORDPRESS_DB_USER }}\" \\\n        --dbpass=\"{{ WORDPRESS_DB_PASSWORD }}\" \\\n        --dbhost=\"{{ WORDPRESS_DB_HOST }}\" \\\n        --path=\"{{ WORDPRESS_DIRECTORY }}\" \\\n        --allow-root\n\n    # Instalamos WordPress con los datos del archivo de variables\n    - name: Instalar WordPress\n      command: \n        wp core install \\\n        --url=\"{{ LE_DOMAIN }}\" \\\n        --title=\"{{ wordpress_title }}\" \\\n        --admin_user=\"{{ wordpress_admin_user }}\" \\\n        --admin_password=\"{{ wordpress_admin_password }}\" \\\n        --admin_email=\"{{ wordpress_admin_email }}\" \\\n        --path=\"{{ WORDPRESS_DIRECTORY }}\" \\\n        --allow-root\n\n    # Cambiamos los permisos del directorio /var/www/html\n    - name: Configuramos permisos de /var/www/html\n      file:\n        path: /var/www/html\n        owner: www-data\n        group: www-data\n        mode: '0755'\n        recurse: yes\n\n    # Cambiamos los permisos del directorio /wp-content/upgrade\n    - name: Configuramos permisos de wp-content\n      file:\n        path: /var/www/html/wp-content/upgrade\n        owner: www-data\n        group: www-data\n        mode: '0755'\n        recurse: yes\n\n    # Cambiamos los permisos del directorio /wp-content/plugins\n    - name: Configuramos permisos de wp-content\n      file:\n        path: /var/www/html/wp-content/plugins\n        owner: www-data\n        group: www-data\n        mode: '0755'\n        recurse: yes\n\n    # Instalamos y activamos el tema de Mindscape para el WordPress\n    - name: Instalar y activar el tema Mindscape\n      command: \n        wp theme install mindscape --activate \\\n        --path=\"{{ WORDPRESS_DIRECTORY }}\" \\\n        --allow-root\n\n    # Instalamos y activamos el plugin wps-hide-login para proteger el acceso al panel de administraci\u00f3n\n    - name: Instalar y activar el plugin wps-hide-login\n      command: \n        wp plugin install wps-hide-login --activate \\\n        --path=\"{{ WORDPRESS_DIRECTORY }}\" \\\n        --allow-root\n\n    # Configuramos la URL de acceso oculta mediante wps-hide-login con los datos del archivo de variables\n    - name: Configurar el plugin wps-hide-login\n      command: \n        wp option update whl_page {{ wordpress_hide_login_url }} \\\n        --path=\"{{ WORDPRESS_DIRECTORY }}\" \\\n        --allow-root\n\n    # Configuramos los enlaces permanentes para la estructura de URLs\n    - name: Configurar los enlaces permanentes\n      command: \n        wp rewrite structure '/%postname%/' \\\n        --path=\"{{ WORDPRESS_DIRECTORY }}\" \\\n        --allow-root\n\n    # Copiamos el archivo .htaccess al directorio de WordPress\n    - name: Copiar el archivo .htaccess al directorio de WordPress\n      copy:\n        src: ../htaccess/.htaccess\n        dest: \"{{ WORDPRESS_DIRECTORY }}/.htaccess\"\n        owner: www-data\n        group: www-data\n        mode: '0644'\n\n    # Nos aseguramos de que la variable $_SERVER['HTTPS'] est\u00e9 en el archivo wp-config.php\n    - name: Asegurar que $_SERVER['HTTPS'] est\u00e9 en wp-config.php\n      lineinfile:\n        path: /var/www/html/wp-config.php\n        line: \"$_SERVER['HTTPS'] = 'on';\"\n        state: present\n        insertbefore: \"^define\\\\( 'DB_NAME', 'wordpress' \\\\);\"\n\n    # Reiniciamos Apache para aplicar los cambios\n    - name: Reiniciar el servidor web Apache\n      service:\n        name: apache2\n        state: restarted\n</code></pre>"},{"location":"practica3-2/#11-paso-crear-el-archivo-setup_loadbalanceryml","title":"11. paso: crear el archivo setup_loadbalancer.yml","text":"<pre><code>- name: Configurar Nginx como balanceador de carga\n  hosts: load_balancer\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n  tasks:\n\n    # Actualizamos los repositorios para tener las \u00faltimas versiones de los paquetes\n    - name: Actualizar los repositorios\n      apt:\n        update_cache: yes\n\n    # Actualizamos los paquetes del sistema, con 'dist' actualizamos los paquetes del sistema.\n    - name: Actualizar los paquetes\n      apt:\n        upgrade: dist  \n\n    # Instalamos Nginx \n    - name: Instalar Nginx\n      apt:\n        name: nginx\n        state: present\n\n    # Copiamos la configuraci\u00f3n personalizada del balanceador de carga desde mi template.\n    - name: Copiar configuraci\u00f3n de balanceador de carga\n      template:\n        src: ../templates/load_balancer.conf\n        dest: /etc/nginx/sites-available/load_balancer.conf\n\n    # Deshabilitamos la configuraci\u00f3n por defecto de Nginx.\n    - name: Deshabilitar el sitio por defecto de Nginx\n      file:\n        path: /etc/nginx/sites-enabled/default  # (ubicaci\u00f3n del archivo de conf)\n        state: absent  # Lo elimino\n\n    # Sustituimos IP_FRONTEND_1 en la configuraci\u00f3n con la IP real desde las variables.\n    - name: Sustituir IP_FRONTEND_1 en la configuraci\u00f3n\n      replace:\n        path: /etc/nginx/sites-available/load_balancer.conf\n        regexp: 'IP_FRONTEND_1'  \n        replace: '{{ IP_FRONTEND_1 }}'\n\n    # Lo mismo para la IP_FRONTEND_2.\n    - name: Sustituir IP_FRONTEND_2 en la configuraci\u00f3n\n      replace:\n        path: /etc/nginx/sites-available/load_balancer.conf\n        regexp: 'IP_FRONTEND_2'\n        replace: '{{ IP_FRONTEND_2 }}'\n\n    # Sustituimos el dominio de Let's Encrypt en la configuraci\u00f3n del balanceador.\n    - name: Sustituir LE_DOMAIN en la configuraci\u00f3n\n      replace:\n        path: /etc/nginx/sites-available/load_balancer.conf\n        regexp: 'LE_DOMAIN'  # Buscamos el marcador de dominio.\n        replace: '{{ LE_DOMAIN }}'  # Lo reemplazo con el valor real.\n\n    # Creamos un enlace simb\u00f3lico para habilitar la configuraci\u00f3n del balanceador de carga en Nginx.\n    - name: Habilitar la configuraci\u00f3n de Nginx\n      file:\n        src: /etc/nginx/sites-available/load_balancer.conf\n        dest: /etc/nginx/sites-enabled/load_balancer.conf\n        state: link\n\n    # Deshabilitamos la configuraci\u00f3n 000-default en Nginx.\n    - name: Deshabilitar 000-default en Nginx\n      file:\n        path: /etc/nginx/sites-available/000-default.conf\n        state: absent \n\n    # Finalmente, reiniciamos Nginx para que aplique los cambios.\n    - name: Reiniciar Nginx\n      systemd:\n        name: nginx\n        state: reloaded  # uso reload para recargar el servicio sin necesidad de reiniciarlo\n</code></pre>"},{"location":"practica3-2/#12-paso-crear-el-archivo-setup_letsencrypt_certificateyml","title":"12. paso: crear el archivo setup_letsencrypt_certificate.yml","text":"<pre><code>---\n- name: Instalar y Configurar Let's Encrypt con Certbot\n  hosts: load_balancer\n  become: yes\n  vars_files:\n    - ../vars/variables.yml\n  tasks:\n\n    # Actualizamos los repositorios para tener las \u00faltimas versiones de los paquetes\n    - name: Actualizar la lista de paquetes\n      apt:\n        update_cache: yes\n\n    # Eliminamos cualquier versi\u00f3n previa de Certbot \n    - name: Desinstalar instalaciones previas de Certbot en caso de que existan\n      apt:\n        name: certbot\n        state: absent\n\n    # Instalamos Certbot con snap\n    - name: Instalar Certbot con Snap\n      snap:\n        name: certbot\n        classic: yes\n        state: present\n\n    # Solicitamos y configuramos autom\u00e1ticamente el certificado SSL mi dominio\n    - name: Solicitar y configurar certificado con Cerbot con Nginx\n      command:\n        cmd: certbot --nginx -m {{ LE_EMAIL }} --agree-tos --no-eff-email -d {{ LE_DOMAIN }} \n\n</code></pre>"},{"location":"practica3-2/#una-vez-hayamos-creado-todos-los-archivos-hay-que-crear-2-archivos-maas-que-seran-para-los-archivos-de-configuracion-habra-que-crear-2-que-son-los-siguientes","title":"una vez hayamos creado todos los archivos hay que crear 2 archivos maas que ser\u00e1n para los archivos de configuraci\u00f3n, habr\u00e1 que crear 2 que son los siguientes:","text":""},{"location":"practica3-2/#000-defaultconf","title":"000-default.conf","text":"<pre><code>\n&lt;VirtualHost *:80&gt;\n    ServerName practica-iaw.zapto.org\n    ServerAdmin webmaster@localhost\n    DocumentRoot /var/www/html/\n\n    DirectoryIndex index.php index.html\n\n    &lt;Directory /var/www/html&gt;\n        AllowOverride All\n        Require all granted\n    &lt;/Directory&gt;\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"practica3-2/#load_balancerconf","title":"load_balancer.conf","text":"<pre><code>upstream frontend_servers {\n    server IP_FRONTEND_1;\n    server IP_FRONTEND_2;\n}\nserver {\n    listen 80;\n    server_name practica-iaw.zapto.org;\n\n    location / {\n        proxy_pass http://frontend_servers;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto https;\n\n    }\n}\n</code></pre>"},{"location":"practica3-2/#ahora-tendremos-que-crear-un-archivo-exports-que-sera-para-configurar-los-directorios-compartidos","title":"ahora tendremos que crear un archivo exports que ser\u00e1 para configurar los directorios compartidos","text":"<pre><code>/var/www/html  CLIENT_IP(rw,sync,no_root_squash,no_subtree_check)\n</code></pre>"},{"location":"practica3-2/#y-tambien-crear-un-archivo-htacces-para-las-reescrituras-de-las-urls","title":"y tambi\u00e9n crear un archivo .htacces para las reescrituras de las urls","text":"<pre><code># BEGIN WordPress\n&lt;IfModule mod_rewrite.c&gt;\nRewriteEngine On\nRewriteBase /\nRewriteRule ^index\\.php$ - [L]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule . /index.php [L]\n&lt;/IfModule&gt;\n# END WordPresss\n</code></pre>"},{"location":"practica3-2/#una-vez-hecho-todo-esto-ya-tendriamos-todo-creado-y-habria-que-ejecutarlo-en-el-siguiente-orden","title":"una vez hecho todo esto, ya tendriamos todo creado y habr\u00eda que ejecutarlo en el siguiente orden:","text":"<pre><code>---\n- import_playbook: playbooks/install_lamp_backend.yml\n- import_playbook: playbooks/install_lamp_frontend.yml\n- import_playbook: playbooks/setup_nfs_server.yml\n- import_playbook: playbooks/setup_nfs_client.yml\n- import_playbook: playbooks/deploy_wordpress_backend.yml\n- import_playbook: playbooks/deploy_wordpress_frontend.yml\n- import_playbook: playbooks/setup_load_balancer.yml\n- import_playbook: playbooks/setup_letsencrypt_certificate.yml\n</code></pre>"},{"location":"practica3-2/#cuando-lo-hayamos-ejecutado-vamos-a-comprobar-que-todo-ha-funcionado-perfectamente-para-ello-nos-vamos-a-ir-al-dominio-y-podemos-ver-que-se-hizo-perfectamente-el-wordpress-con-su-balanceo-de-carga-y-tambien-podemos-ver-el-certificado-de-letsencrypt","title":"cuando lo hayamos ejecutado, vamos a comprobar que todo ha funcionado perfectamente, para ello nos vamos a ir al dominio y podemos ver que se hizo perfectamente el wordpress con su balanceo de carga y tambi\u00e9n podemos ver el certificado de letsencrypt:","text":""}]}