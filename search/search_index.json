{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"practica3-1/","text":"Practica-IAW-3.1- Implantaci\u00f3n de Moodle en Amazon Web Services (AWS) mediante Ansible En esta pr\u00e1ctica vamos a realizar la implantaci\u00f3n de la aplicaci\u00f3n web Moodle en dos instancias EC2 de Amazon Web Services (AWS) haciendo uso de playbooks de Ansible. En una de las instancias deber\u00e1 instalar Apache HTTP Server y los m\u00f3dulos necesarios de PHP y en la otra m\u00e1quina deber\u00e1 instalar MySQL Server. Implantaci\u00f3n de Moodle en Amazon Web Services (AWS) mediante Ansible Pasos a seguir antes de todo: Tener la siguiente estructura de directorios y archivos dentro de la instancia del nodo control, ya que todo lo que vamos a hacer va a ser desde el nodo control: La arquitectura de esta aplicaci\u00f3n estar\u00e1 formada por dos capas: Una capa de front-end, formada por un servidor web con Apache HTTP Server. Una capa de back-end, formada por un servidor MySQL. Ahora vamos al archivo de inventory, donde en inventory tenemos que poner las ip p\u00fablica del frontend y el backend y el grupo. [frontend] 44.199.2.175 [backend] 34.233.73.87 [all:vars] ansible_user=ubuntu ansible_ssh_private_key_file=/home/ubuntu/practica-iaw-3.1/vockey.pem ansible_ssh_common_args='-o StrictHostKeyChecking=accept-new' 1. paso: Creamos el nombre de dominio desde no-ip, poniendo la ip del frontend 2. paso: Dentro de la instancia nodo control, tener metida la vockey.pem y darle permisos chmod 400 y descargar ansible apt install ansible -y 3. paso: vamos a utilizar las siguientes variables: frontend_private_ip: 172.31.41.12 db: name: moodle_db user: juanje password: Eliker123 moodle: directory: /var/www/html/moodle db_name: moodle_db db_user: usuario_moodle db_password: Eliker123 type: mysqli db_host: 172.31.34.212 ip_cliente_mysql: 172.31.% domain: practica-iaw.zapto.org data_directory: /var/www/moodledata certbot: le_email: juan@email.es le_domain: practica-iaw.zapto.org 4. paso: crear el archivo install_lamp_frontend.yml --- - name: Configurar Moodle Frontend hosts: frontend become: yes tasks: - name: Actualizar los repositorios apt: update_cache: yes - name: Instalar el servidor web Apache apt: name: apache2 state: present - name: Instalar PHP y los m\u00f3dulos necesarios apt: name: - php - php-mysql - libapache2-mod-php - php-bcmath - php-curl - php-gd - php-imagick - php-intl - php-memcached - php-mbstring - php-dom - php-zip - php-cli - php-xml - php-soap state: present - name: Modificamos el valor max_input_vars de PHP replace: path: /etc/php/8.3/apache2/php.ini regexp: ;max_input_vars = 1000 replace: max_input_vars = 5000 - name: Modificamos el valor de memory_limit de PHP replace: path: /etc/php/8.3/apache2/php.ini regexp: memory_limit = 128M replace: memory_limit = 256M - name: Modificamos el valor de post_max_size de PHP replace: path: /etc/php/8.3/apache2/php.ini regexp: post_max_size = 8M replace: post_max_size = 128M - name: Modificamos el valor de upload_max_filesize de PHP replace: path: /etc/php/8.3/apache2/php.ini regexp: upload_max_filesize = 2M replace: upload_max_filesize = 128M - name: Copiar el archivo de configuraci\u00f3n de Apache copy: src: ../templates/000-default.conf dest: /etc/apache2/sites-available/ mode: 0755 - name: Crear directorio /var/www/html/moodle file: path: /var/www/html/moodle state: directory owner: www-data group: www-data mode: '0755' - name: Crear directorio /var/www/moodledata file: path: /var/www/moodledata state: directory owner: www-data group: www-data mode: '0755' - name: Habilitar el m\u00f3dulo rewrite de Apache command: a2enmod rewrite changed_when: false - name: Reiniciar el servidor web Apache service: name: apache2 state: restarted 5. paso: crear el archivo install_lamp_backend.yml --- - name: Playbook para instalar la pila LAMP en el Backend hosts: backend become: yes vars_files: - ../vars/variables.yml tasks: - name: Actualizar los repositorios apt: update_cache: yes - name: Instalar el sistema gestor de bases de datos MySQL apt: name: mysql-server state: present - name: Instalamos el m\u00f3dulo de pymysql apt: name: python3-pymysql state: present - name: Crear la base de datos para moodle mysql_db: name: \"{{ moodle.db_name }}\" encoding: utf8mb4 collation: utf8mb4_unicode_ci state: present login_unix_socket: /var/run/mysqld/mysqld.sock - name: Borra el usuario si existe mysql_user: name: \"{{ moodle.db_user }}\" host: \"{{ moodle.ip_cliente_mysql }}\" state: absent login_unix_socket: /var/run/mysqld/mysqld.sock - name: Crear el usuario para la base de datos de moodle mysql_user: name: \"{{ moodle.db_user }}\" host: \"{{ moodle.ip_cliente_mysql }}\" password: \"{{ moodle.db_password }}\" priv: \"{{ moodle.db_name }}.*:ALL\" state: present login_unix_socket: /var/run/mysqld/mysqld.sock - name: Reiniciamos privilegios del usuario mysql_db: name: \"{{ moodle.db_name }}\" state: present login_unix_socket: /var/run/mysqld/mysqld.sock - name: Reiniciamos el servicio de base de datos service: name: mysql state: restarted 6. paso: crear el archivo setup_letsencrypt_https.yml --- - name: Configurar Certbot y solicitar certificado SSL hosts: frontend become: yes vars_files: - ../vars/variables.yml tasks: # Instalar snapd si no est\u00e1 presente - name: Instalar snapd si no est\u00e1 presente apt: name: snapd state: present # Instalar el paquete base de snap si no est\u00e1 - name: Instalar core de snap si no est\u00e1 presente snap: name: core state: present # Eliminar instalaciones anteriores de certbot con apt - name: Eliminar Certbot instalado con apt (si existe) apt: name: certbot state: absent # Instalar Certbot con snap - name: Instalar Certbot usando snap snap: name: certbot state: present # Verificar las variables certbot - name: Verificar las variables certbot debug: msg: \"Email: {{ certbot.le_email }}, Domain: {{ certbot.le_domain }}\" # Solicitar un certificado SSL para el dominio con Certbot - name: Solicitar certificado SSL para el dominio con Certbot command: > certbot --apache -m \"{{ certbot.le_email }}\" --agree-tos --no-eff-email -d \"{{ certbot.le_domain }}\" --non-interactive 7. paso: crear el archivo deploy.yml - name: Deploy Moodle hosts: frontend become: yes vars_files: - ../vars/variables.yml - name: Descargar el c\u00f3digo fuente de moodle get_url: url: https://github.com/moodle/moodle/archive/refs/tags/v4.3.1.zip dest: /tmp mode: 0755 - name: Instalar unzip apt: name: unzip state: present - name: Descomprimir el paquete de moodle unarchive: src: /tmp/moodle-4.3.1.zip dest: /tmp remote_src: yes - name: Eliminar el directorio de instalaci\u00f3n file: path: /var/www/html/ state: absent - name: Crear el directorio de instalaci\u00f3n file: path: /var/www/html state: directory owner: www-data group: www-data mode: 0755 - name: Copiar contenido de moodle-4.3.1 a /var/www/html copy: src: /tmp/moodle-4.3.1/ dest: /var/www/html remote_src: true force: yes - name: Modificar los permisos del directorio /var/www/html file: path: /var/www/html owner: www-data group: www-data recurse: yes mode: 0755 - name: Modificar los permisos del directorio /var/moodledata file: path: /var/moodledata owner: www-data group: www-data recurse: yes mode: 0755 - name: Instalar moodle desde PHP CLI command: sudo -u www-data php /var/www/html/admin/cli/install.php \\ --wwwroot={{ moodle.www_root }} \\ --dataroot={{ moodle.data_root }} \\ --dbtype={{ moodle.type }} \\ --dbhost={{ moodle.host }} \\ --dbname={{ db.name }} \\ --dbuser={{ db.user }} \\ --dbpass={{ db.password }} \\ --fullname=\"{{ moodle.fullname }}\" \\ --shortname=\"{{ moodle.shortname }}\" \\ --summary=\"{{ moodle.summary }}\" \\ --adminuser={{ moodle.admin_user }} \\ --adminpass={{ moodle.admin_pass }} \\ --adminemail={{ moodle.admin_email }} \\ --non-interactive \\ --agree-license args: chdir: /var/www/html - name: Configurar cron para Moodle become: yes ansible.builtin.cron: name: \"Moodle Cron Job\" minute: \"*\" job: \"/usr/bin/php /var/www/html/admin/cli/cron.php >/dev/null 2>&1\" state: present - name: Reiniciar servicio cron become: yes ansible.builtin.service: name: cron state: restarted enabled: yes 8. paso: seg\u00fan el orden hayamos creado los archivos, se ejecutan, primero se ejecuta el frontend, backend, letsencrypt y por ultimo deploy sudo ansible-playbook -i ./inventory/inventory main.yml comprobaci\u00f3n ejecucion del main.yml donde se encuentran todos los archivos 9. paso: comprobaci\u00f3n del funcionamiento correcto de moodle 10. paso: comprobar certificado","title":"Practica 3-1"},{"location":"practica3-1/#practica-iaw-31-implantacion-de-moodle-en-amazon-web-services-aws-mediante-ansible","text":"","title":"Practica-IAW-3.1- Implantaci\u00f3n de Moodle en Amazon Web Services (AWS) mediante Ansible"},{"location":"practica3-1/#en-esta-practica-vamos-a-realizar-la-implantacion-de-la-aplicacion-web-moodle-en-dos-instancias-ec2-de-amazon-web-services-aws-haciendo-uso-de-playbooks-de-ansible-en-una-de-las-instancias-debera-instalar-apache-http-server-y-los-modulos-necesarios-de-php-y-en-la-otra-maquina-debera-instalar-mysql-server","text":"","title":"En esta pr\u00e1ctica vamos a realizar la implantaci\u00f3n de la aplicaci\u00f3n web Moodle en dos instancias EC2 de Amazon Web Services (AWS) haciendo uso de playbooks de Ansible. En una de las instancias deber\u00e1 instalar Apache HTTP Server y los m\u00f3dulos necesarios de PHP y en la otra m\u00e1quina deber\u00e1 instalar MySQL Server."},{"location":"practica3-1/#implantacion-de-moodle-en-amazon-web-services-aws-mediante-ansible","text":"","title":"Implantaci\u00f3n de Moodle en Amazon Web Services (AWS) mediante Ansible"},{"location":"practica3-1/#pasos-a-seguir-antes-de-todo","text":"","title":"Pasos a seguir antes de todo:"},{"location":"practica3-1/#tener-la-siguiente-estructura-de-directorios-y-archivos-dentro-de-la-instancia-del-nodo-control-ya-que-todo-lo-que-vamos-a-hacer-va-a-ser-desde-el-nodo-control","text":"","title":"Tener la siguiente estructura de directorios y archivos dentro de la instancia del nodo control, ya que todo lo que vamos a hacer va a ser desde el nodo control:"},{"location":"practica3-1/#la-arquitectura-de-esta-aplicacion-estara-formada-por-dos-capas","text":"","title":"La arquitectura de esta aplicaci\u00f3n estar\u00e1 formada por dos capas:"},{"location":"practica3-1/#una-capa-de-front-end-formada-por-un-servidor-web-con-apache-http-server","text":"","title":"Una capa de front-end, formada por un servidor web con Apache HTTP Server."},{"location":"practica3-1/#una-capa-de-back-end-formada-por-un-servidor-mysql","text":"","title":"Una capa de back-end, formada por un servidor MySQL."},{"location":"practica3-1/#_1","text":"","title":""},{"location":"practica3-1/#ahora-vamos-al-archivo-de-inventory-donde-en-inventory-tenemos-que-poner-las-ip-publica-del-frontend-y-el-backend-y-el-grupo","text":"[frontend] 44.199.2.175 [backend] 34.233.73.87 [all:vars] ansible_user=ubuntu ansible_ssh_private_key_file=/home/ubuntu/practica-iaw-3.1/vockey.pem ansible_ssh_common_args='-o StrictHostKeyChecking=accept-new'","title":"Ahora vamos al archivo de inventory, donde en inventory tenemos que poner las ip p\u00fablica del frontend y el backend y el grupo."},{"location":"practica3-1/#1-paso-creamos-el-nombre-de-dominio-desde-no-ip-poniendo-la-ip-del-frontend","text":"","title":"1. paso: Creamos el nombre de dominio desde no-ip, poniendo la ip del frontend"},{"location":"practica3-1/#2-paso-dentro-de-la-instancia-nodo-control-tener-metida-la-vockeypem-y-darle-permisos-chmod-400-y-descargar-ansible","text":"apt install ansible -y","title":"2. paso: Dentro de la instancia nodo control, tener metida la vockey.pem y darle permisos chmod 400 y descargar ansible"},{"location":"practica3-1/#3-paso-vamos-a-utilizar-las-siguientes-variables","text":"frontend_private_ip: 172.31.41.12 db: name: moodle_db user: juanje password: Eliker123 moodle: directory: /var/www/html/moodle db_name: moodle_db db_user: usuario_moodle db_password: Eliker123 type: mysqli db_host: 172.31.34.212 ip_cliente_mysql: 172.31.% domain: practica-iaw.zapto.org data_directory: /var/www/moodledata certbot: le_email: juan@email.es le_domain: practica-iaw.zapto.org","title":"3. paso: vamos a utilizar las siguientes variables:"},{"location":"practica3-1/#4-paso-crear-el-archivo-install_lamp_frontendyml","text":"--- - name: Configurar Moodle Frontend hosts: frontend become: yes tasks: - name: Actualizar los repositorios apt: update_cache: yes - name: Instalar el servidor web Apache apt: name: apache2 state: present - name: Instalar PHP y los m\u00f3dulos necesarios apt: name: - php - php-mysql - libapache2-mod-php - php-bcmath - php-curl - php-gd - php-imagick - php-intl - php-memcached - php-mbstring - php-dom - php-zip - php-cli - php-xml - php-soap state: present - name: Modificamos el valor max_input_vars de PHP replace: path: /etc/php/8.3/apache2/php.ini regexp: ;max_input_vars = 1000 replace: max_input_vars = 5000 - name: Modificamos el valor de memory_limit de PHP replace: path: /etc/php/8.3/apache2/php.ini regexp: memory_limit = 128M replace: memory_limit = 256M - name: Modificamos el valor de post_max_size de PHP replace: path: /etc/php/8.3/apache2/php.ini regexp: post_max_size = 8M replace: post_max_size = 128M - name: Modificamos el valor de upload_max_filesize de PHP replace: path: /etc/php/8.3/apache2/php.ini regexp: upload_max_filesize = 2M replace: upload_max_filesize = 128M - name: Copiar el archivo de configuraci\u00f3n de Apache copy: src: ../templates/000-default.conf dest: /etc/apache2/sites-available/ mode: 0755 - name: Crear directorio /var/www/html/moodle file: path: /var/www/html/moodle state: directory owner: www-data group: www-data mode: '0755' - name: Crear directorio /var/www/moodledata file: path: /var/www/moodledata state: directory owner: www-data group: www-data mode: '0755' - name: Habilitar el m\u00f3dulo rewrite de Apache command: a2enmod rewrite changed_when: false - name: Reiniciar el servidor web Apache service: name: apache2 state: restarted","title":"4. paso: crear el archivo install_lamp_frontend.yml"},{"location":"practica3-1/#5-paso-crear-el-archivo-install_lamp_backendyml","text":"--- - name: Playbook para instalar la pila LAMP en el Backend hosts: backend become: yes vars_files: - ../vars/variables.yml tasks: - name: Actualizar los repositorios apt: update_cache: yes - name: Instalar el sistema gestor de bases de datos MySQL apt: name: mysql-server state: present - name: Instalamos el m\u00f3dulo de pymysql apt: name: python3-pymysql state: present - name: Crear la base de datos para moodle mysql_db: name: \"{{ moodle.db_name }}\" encoding: utf8mb4 collation: utf8mb4_unicode_ci state: present login_unix_socket: /var/run/mysqld/mysqld.sock - name: Borra el usuario si existe mysql_user: name: \"{{ moodle.db_user }}\" host: \"{{ moodle.ip_cliente_mysql }}\" state: absent login_unix_socket: /var/run/mysqld/mysqld.sock - name: Crear el usuario para la base de datos de moodle mysql_user: name: \"{{ moodle.db_user }}\" host: \"{{ moodle.ip_cliente_mysql }}\" password: \"{{ moodle.db_password }}\" priv: \"{{ moodle.db_name }}.*:ALL\" state: present login_unix_socket: /var/run/mysqld/mysqld.sock - name: Reiniciamos privilegios del usuario mysql_db: name: \"{{ moodle.db_name }}\" state: present login_unix_socket: /var/run/mysqld/mysqld.sock - name: Reiniciamos el servicio de base de datos service: name: mysql state: restarted","title":"5. paso: crear el archivo install_lamp_backend.yml"},{"location":"practica3-1/#6-paso-crear-el-archivo-setup_letsencrypt_httpsyml","text":"--- - name: Configurar Certbot y solicitar certificado SSL hosts: frontend become: yes vars_files: - ../vars/variables.yml tasks: # Instalar snapd si no est\u00e1 presente - name: Instalar snapd si no est\u00e1 presente apt: name: snapd state: present # Instalar el paquete base de snap si no est\u00e1 - name: Instalar core de snap si no est\u00e1 presente snap: name: core state: present # Eliminar instalaciones anteriores de certbot con apt - name: Eliminar Certbot instalado con apt (si existe) apt: name: certbot state: absent # Instalar Certbot con snap - name: Instalar Certbot usando snap snap: name: certbot state: present # Verificar las variables certbot - name: Verificar las variables certbot debug: msg: \"Email: {{ certbot.le_email }}, Domain: {{ certbot.le_domain }}\" # Solicitar un certificado SSL para el dominio con Certbot - name: Solicitar certificado SSL para el dominio con Certbot command: > certbot --apache -m \"{{ certbot.le_email }}\" --agree-tos --no-eff-email -d \"{{ certbot.le_domain }}\" --non-interactive","title":"6. paso: crear el archivo setup_letsencrypt_https.yml"},{"location":"practica3-1/#7-paso-crear-el-archivo-deployyml","text":"- name: Deploy Moodle hosts: frontend become: yes vars_files: - ../vars/variables.yml - name: Descargar el c\u00f3digo fuente de moodle get_url: url: https://github.com/moodle/moodle/archive/refs/tags/v4.3.1.zip dest: /tmp mode: 0755 - name: Instalar unzip apt: name: unzip state: present - name: Descomprimir el paquete de moodle unarchive: src: /tmp/moodle-4.3.1.zip dest: /tmp remote_src: yes - name: Eliminar el directorio de instalaci\u00f3n file: path: /var/www/html/ state: absent - name: Crear el directorio de instalaci\u00f3n file: path: /var/www/html state: directory owner: www-data group: www-data mode: 0755 - name: Copiar contenido de moodle-4.3.1 a /var/www/html copy: src: /tmp/moodle-4.3.1/ dest: /var/www/html remote_src: true force: yes - name: Modificar los permisos del directorio /var/www/html file: path: /var/www/html owner: www-data group: www-data recurse: yes mode: 0755 - name: Modificar los permisos del directorio /var/moodledata file: path: /var/moodledata owner: www-data group: www-data recurse: yes mode: 0755 - name: Instalar moodle desde PHP CLI command: sudo -u www-data php /var/www/html/admin/cli/install.php \\ --wwwroot={{ moodle.www_root }} \\ --dataroot={{ moodle.data_root }} \\ --dbtype={{ moodle.type }} \\ --dbhost={{ moodle.host }} \\ --dbname={{ db.name }} \\ --dbuser={{ db.user }} \\ --dbpass={{ db.password }} \\ --fullname=\"{{ moodle.fullname }}\" \\ --shortname=\"{{ moodle.shortname }}\" \\ --summary=\"{{ moodle.summary }}\" \\ --adminuser={{ moodle.admin_user }} \\ --adminpass={{ moodle.admin_pass }} \\ --adminemail={{ moodle.admin_email }} \\ --non-interactive \\ --agree-license args: chdir: /var/www/html - name: Configurar cron para Moodle become: yes ansible.builtin.cron: name: \"Moodle Cron Job\" minute: \"*\" job: \"/usr/bin/php /var/www/html/admin/cli/cron.php >/dev/null 2>&1\" state: present - name: Reiniciar servicio cron become: yes ansible.builtin.service: name: cron state: restarted enabled: yes","title":"7. paso: crear el archivo deploy.yml"},{"location":"practica3-1/#8-paso-segun-el-orden-hayamos-creado-los-archivos-se-ejecutan-primero-se-ejecuta-el-frontend-backend-letsencrypt-y-por-ultimo-deploy","text":"sudo ansible-playbook -i ./inventory/inventory main.yml","title":"8. paso: seg\u00fan el orden hayamos creado los archivos, se ejecutan, primero se ejecuta el frontend, backend, letsencrypt y por ultimo deploy"},{"location":"practica3-1/#comprobacion-ejecucion-del-mainyml-donde-se-encuentran-todos-los-archivos","text":"","title":"comprobaci\u00f3n ejecucion del main.yml donde se encuentran todos los archivos"},{"location":"practica3-1/#9-paso-comprobacion-del-funcionamiento-correcto-de-moodle","text":"","title":"9. paso: comprobaci\u00f3n del funcionamiento correcto de moodle"},{"location":"practica3-1/#10-paso-comprobar-certificado","text":"","title":"10. paso: comprobar certificado"}]}