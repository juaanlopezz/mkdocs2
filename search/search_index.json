{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>bienvenido a la p\u00e1gina web de juan jesus lopez</p>"},{"location":"practica3-1/","title":"Practica-IAW-3.1- Implantaci\u00f3n de Moodle en Amazon Web Services (AWS) mediante Ansible","text":""},{"location":"practica3-1/#en-esta-practica-vamos-a-realizar-la-implantacion-de-la-aplicacion-web-moodle-en-dos-instancias-ec2-de-amazon-web-services-aws-haciendo-uso-de-playbooks-de-ansible-en-una-de-las-instancias-debera-instalar-apache-http-server-y-los-modulos-necesarios-de-php-y-en-la-otra-maquina-debera-instalar-mysql-server","title":"En esta pr\u00e1ctica vamos a realizar la implantaci\u00f3n de la aplicaci\u00f3n web Moodle en dos instancias EC2 de Amazon Web Services (AWS) haciendo uso de playbooks de Ansible. En una de las instancias deber\u00e1 instalar Apache HTTP Server y los m\u00f3dulos necesarios de PHP y en la otra m\u00e1quina deber\u00e1 instalar MySQL Server.","text":""},{"location":"practica3-1/#implantacion-de-moodle-en-amazon-web-services-aws-mediante-ansible","title":"Implantaci\u00f3n de Moodle en Amazon Web Services (AWS) mediante Ansible","text":""},{"location":"practica3-1/#pasos-a-seguir-antes-de-todo","title":"Pasos a seguir antes de todo:","text":""},{"location":"practica3-1/#tener-la-siguiente-estructura-de-directorios-y-archivos-dentro-de-la-instancia-del-nodo-control-ya-que-todo-lo-que-vamos-a-hacer-va-a-ser-desde-el-nodo-control","title":"Tener la siguiente estructura de directorios y archivos dentro de la instancia del nodo control, ya que todo lo que vamos a hacer va a ser desde el nodo control:","text":""},{"location":"practica3-1/#la-arquitectura-de-esta-aplicacion-estara-formada-por-dos-capas","title":"La arquitectura de esta aplicaci\u00f3n estar\u00e1 formada por dos capas:","text":""},{"location":"practica3-1/#una-capa-de-front-end-formada-por-un-servidor-web-con-apache-http-server","title":"Una capa de front-end, formada por un servidor web con Apache HTTP Server.","text":""},{"location":"practica3-1/#una-capa-de-back-end-formada-por-un-servidor-mysql","title":"Una capa de back-end, formada por un servidor MySQL.","text":""},{"location":"practica3-1/#_1","title":"Practica_3-1","text":""},{"location":"practica3-1/#ahora-vamos-al-archivo-de-inventory-donde-en-inventory-tenemos-que-poner-las-ip-publica-del-frontend-y-el-backend-y-el-grupo","title":"Ahora vamos al archivo de inventory, donde en inventory tenemos que poner las ip p\u00fablica del frontend y el backend y el grupo.","text":"<pre><code>[frontend]\n44.199.2.175\n\n[backend]\n34.233.73.87\n\n[all:vars]\nansible_user=ubuntu\nansible_ssh_private_key_file=/home/ubuntu/practica-iaw-3.1/vockey.pem\nansible_ssh_common_args='-o StrictHostKeyChecking=accept-new'\n</code></pre>"},{"location":"practica3-1/#1-paso-creamos-el-nombre-de-dominio-desde-no-ip-poniendo-la-ip-del-frontend","title":"1. paso: Creamos el nombre de dominio desde no-ip, poniendo la ip del frontend","text":""},{"location":"practica3-1/#2-paso-dentro-de-la-instancia-nodo-control-tener-metida-la-vockeypem-y-darle-permisos-chmod-400-y-descargar-ansible","title":"2. paso: Dentro de la instancia nodo control, tener metida la vockey.pem y darle permisos chmod 400 y descargar ansible","text":"<pre><code>apt install ansible -y\n</code></pre>"},{"location":"practica3-1/#3-paso-vamos-a-utilizar-las-siguientes-variables","title":"3. paso: vamos a utilizar las siguientes variables:","text":"<pre><code>frontend_private_ip: 172.31.41.12\n\ndb:\n    name: moodle_db\n    user: juanje\n    password: Eliker123\n\nmoodle:\n    directory: /var/www/html/moodle\n    db_name: moodle_db\n    db_user: usuario_moodle\n    db_password: Eliker123\n    type: mysqli\n    db_host: 172.31.34.212\n    ip_cliente_mysql: 172.31.%\n    domain: practica-iaw.zapto.org\n    data_directory: /var/www/moodledata\n\n\ncertbot:\n    le_email: juan@email.es\n    le_domain: practica-iaw.zapto.org\n\n</code></pre>"},{"location":"practica3-1/#4-paso-crear-el-archivo-install_lamp_frontendyml","title":"4. paso: crear el archivo install_lamp_frontend.yml","text":"<pre><code>---\n- name: Configurar Moodle Frontend\n  hosts: frontend\n  become: yes\n\n  tasks:\n\n    - name: Actualizar los repositorios\n      apt:\n        update_cache: yes\n\n    - name: Instalar el servidor web Apache\n      apt:\n        name: apache2\n        state: present\n\n    - name: Instalar PHP y los m\u00f3dulos necesarios\n      apt: \n        name:\n          - php\n          - php-mysql\n          - libapache2-mod-php\n          - php-bcmath\n          - php-curl\n          - php-gd\n          - php-imagick\n          - php-intl\n          - php-memcached\n          - php-mbstring\n          - php-dom\n          - php-zip\n          - php-cli\n          - php-xml\n          - php-soap\n        state: present\n\n    - name: Modificamos el valor max_input_vars de PHP\n      replace: \n        path: /etc/php/8.3/apache2/php.ini\n        regexp: ;max_input_vars = 1000\n        replace: max_input_vars = 5000\n\n    - name: Modificamos el valor de memory_limit de PHP\n      replace: \n        path: /etc/php/8.3/apache2/php.ini\n        regexp: memory_limit = 128M\n        replace: memory_limit = 256M\n\n    - name: Modificamos el valor de post_max_size de PHP\n      replace: \n        path: /etc/php/8.3/apache2/php.ini\n        regexp: post_max_size = 8M\n        replace: post_max_size = 128M\n\n    - name: Modificamos el valor de upload_max_filesize de PHP\n      replace:\n        path: /etc/php/8.3/apache2/php.ini\n        regexp: upload_max_filesize = 2M\n        replace: upload_max_filesize = 128M\n\n    - name: Copiar el archivo de configuraci\u00f3n de Apache\n      copy:\n        src: ../templates/000-default.conf\n        dest: /etc/apache2/sites-available/\n        mode: 0755\n\n    - name: Crear directorio /var/www/html/moodle\n      file:\n        path: /var/www/html/moodle\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: '0755'\n\n    - name: Crear directorio /var/www/moodledata\n      file:\n        path: /var/www/moodledata\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: '0755'\n\n    - name: Habilitar el m\u00f3dulo rewrite de Apache\n      command: a2enmod rewrite\n      changed_when: false\n\n\n    - name: Reiniciar el servidor web Apache\n      service:\n        name: apache2\n        state: restarted\n</code></pre>"},{"location":"practica3-1/#5-paso-crear-el-archivo-install_lamp_backendyml","title":"5. paso: crear el archivo install_lamp_backend.yml","text":"<pre><code>---\n- name: Playbook para instalar la pila LAMP en el Backend\n  hosts: backend\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n  tasks:\n\n    - name: Actualizar los repositorios\n      apt:\n        update_cache: yes\n\n    - name: Instalar el sistema gestor de bases de datos MySQL\n      apt:\n        name: mysql-server\n        state: present\n\n    - name: Instalamos el m\u00f3dulo de pymysql\n      apt:\n        name: python3-pymysql\n        state: present\n\n    - name: Crear la base de datos para moodle\n      mysql_db:\n        name: \"{{ moodle.db_name }}\"\n        encoding: utf8mb4\n        collation: utf8mb4_unicode_ci\n        state: present\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n\n    - name: Borra el usuario si existe\n      mysql_user:\n        name: \"{{ moodle.db_user }}\"\n        host: \"{{ moodle.ip_cliente_mysql }}\"\n        state: absent\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n\n    - name: Crear el usuario para la base de datos de moodle\n      mysql_user:\n        name: \"{{ moodle.db_user }}\"\n        host: \"{{ moodle.ip_cliente_mysql }}\"\n        password: \"{{ moodle.db_password }}\"\n        priv: \"{{ moodle.db_name }}.*:ALL\"\n        state: present\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n\n    - name: Reiniciamos privilegios del usuario\n      mysql_db:\n        name: \"{{ moodle.db_name }}\"\n        state: present\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n\n    - name: Reiniciamos el servicio de base de datos\n      service:\n        name: mysql\n        state: restarted\n</code></pre>"},{"location":"practica3-1/#6-paso-crear-el-archivo-setup_letsencrypt_httpsyml","title":"6. paso: crear el archivo setup_letsencrypt_https.yml","text":"<pre><code>---\n- name: Configurar Certbot y solicitar certificado SSL\n  hosts: frontend\n  become: yes\n  vars_files:\n    - ../vars/variables.yml \n\n  tasks:\n    # Instalar snapd si no est\u00e1 presente\n    - name: Instalar snapd si no est\u00e1 presente\n      apt:\n        name: snapd\n        state: present\n\n    # Instalar el paquete base de snap si no est\u00e1\n    - name: Instalar core de snap si no est\u00e1 presente\n      snap:\n        name: core\n        state: present\n\n    # Eliminar instalaciones anteriores de certbot con apt\n    - name: Eliminar Certbot instalado con apt (si existe)\n      apt:\n        name: certbot\n        state: absent\n\n    # Instalar Certbot con snap\n    - name: Instalar Certbot usando snap\n      snap:\n        name: certbot\n        state: present\n\n    # Verificar las variables certbot\n    - name: Verificar las variables certbot\n      debug:\n        msg: \"Email: {{ certbot.le_email }}, Domain: {{ certbot.le_domain }}\"\n\n    # Solicitar un certificado SSL para el dominio con Certbot\n    - name: Solicitar certificado SSL para el dominio con Certbot\n      command: &gt;\n        certbot --apache\n        -m \"{{ certbot.le_email }}\"\n        --agree-tos\n        --no-eff-email\n        -d \"{{ certbot.le_domain }}\"\n        --non-interactive\n</code></pre>"},{"location":"practica3-1/#7-paso-crear-el-archivo-deployyml","title":"7. paso: crear el archivo deploy.yml","text":"<pre><code>- name: Deploy Moodle\n  hosts: frontend\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n    - name: Descargar el c\u00f3digo fuente de moodle\n      get_url:\n        url: https://github.com/moodle/moodle/archive/refs/tags/v4.3.1.zip \n        dest: /tmp\n        mode: 0755\n\n    - name: Instalar unzip\n      apt: \n        name: unzip\n        state: present\n\n    - name: Descomprimir el paquete de moodle\n      unarchive:\n        src: /tmp/moodle-4.3.1.zip  \n        dest: /tmp\n        remote_src: yes\n\n    - name: Eliminar el directorio de instalaci\u00f3n\n      file:\n        path: /var/www/html/\n        state: absent\n\n    - name: Crear el directorio de instalaci\u00f3n\n      file:\n        path: /var/www/html\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: 0755\n\n    - name: Copiar contenido de moodle-4.3.1 a /var/www/html\n      copy:\n        src: /tmp/moodle-4.3.1/\n        dest: /var/www/html\n        remote_src: true\n        force: yes\n\n    - name: Modificar los permisos del directorio /var/www/html\n      file:\n        path: /var/www/html\n        owner: www-data\n        group: www-data\n        recurse: yes\n        mode: 0755\n\n    - name: Modificar los permisos del directorio /var/moodledata\n      file:\n        path: /var/moodledata\n        owner: www-data\n        group: www-data\n        recurse: yes\n        mode: 0755\n\n    - name: Instalar moodle desde PHP CLI\n      command:\n        sudo -u www-data php /var/www/html/admin/cli/install.php \\\n        --wwwroot={{ moodle.www_root }} \\\n        --dataroot={{ moodle.data_root }} \\\n        --dbtype={{ moodle.type }} \\\n        --dbhost={{ moodle.host }} \\\n        --dbname={{ db.name }} \\\n        --dbuser={{ db.user }} \\\n        --dbpass={{ db.password }} \\\n        --fullname=\"{{ moodle.fullname }}\" \\\n        --shortname=\"{{ moodle.shortname }}\" \\\n        --summary=\"{{ moodle.summary }}\" \\\n        --adminuser={{ moodle.admin_user }} \\\n        --adminpass={{ moodle.admin_pass }} \\\n        --adminemail={{ moodle.admin_email }} \\\n        --non-interactive \\\n        --agree-license\n      args:\n        chdir: /var/www/html\n\n    - name: Configurar cron para Moodle\n      become: yes\n      ansible.builtin.cron:\n        name: \"Moodle Cron Job\"\n        minute: \"*\"\n        job: \"/usr/bin/php /var/www/html/admin/cli/cron.php &gt;/dev/null 2&gt;&amp;1\"\n        state: present\n\n\n    - name: Reiniciar servicio cron \n      become: yes\n      ansible.builtin.service:\n        name: cron\n        state: restarted\n        enabled: yes\n\n</code></pre>"},{"location":"practica3-1/#8-paso-segun-el-orden-hayamos-creado-los-archivos-se-ejecutan-primero-se-ejecuta-el-frontend-backend-letsencrypt-y-por-ultimo-deploy","title":"8. paso: seg\u00fan el orden hayamos creado los archivos, se ejecutan, primero se ejecuta el frontend, backend, letsencrypt y por ultimo deploy","text":"<pre><code>sudo ansible-playbook -i ./inventory/inventory main.yml\n</code></pre>"},{"location":"practica3-1/#comprobacion-ejecucion-del-mainyml-donde-se-encuentran-todos-los-archivos","title":"comprobaci\u00f3n ejecucion del main.yml donde se encuentran todos los archivos","text":""},{"location":"practica3-1/#9-paso-comprobacion-del-funcionamiento-correcto-de-moodle","title":"9. paso: comprobaci\u00f3n del funcionamiento correcto de moodle","text":""},{"location":"practica3-1/#10-paso-comprobar-certificado","title":"10. paso: comprobar certificado","text":""}]}